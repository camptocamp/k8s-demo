---
apps:
  efs-provisioner:
    enabled: ${enable_efs}
  cert-manager:
    enabled: false
  traefik:
    enabled: false

external-dns-aws:
  iam_role_arn: ${loki_assumable_role_arn}

argo-cd:
  server:
    config:
      admin.enabled: "false"
    extraArgs:
      - --insecure
    service:
      type: NodePort
    ingress:
      paths:
        - /*
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'
        alb.ingress.kubernetes.io/conditions.argogrpc: |
          [{"field":"http-header","httpHeaderConfig":{"httpHeaderName": "Content-Type", "values":["application/grpc"]}}]
      extraPaths:
        - path: /*
          backend:
            serviceName: argogrpc
            servicePort: 80

efs-provisioner:
  efsProvisioner:
    efsFileSystemId: ${efs_filesystem_id}
    awsRegion: ${aws_default_region}
    dnsName: ${efs_dns_name}

kube-prometheus-stack:
  alertmanager:
    service:
      type: NodePort
    ingress:
      paths:
        - /*
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'
  grafana:
    service:
      type: NodePort
    ingress:
      path: /*
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'
  prometheus:
    service:
      type: NodePort
    ingress:
      paths:
        - /*
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'

thanos:
  bucketweb:
    service:
      type: NodePort
    ingress:
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'
  queryFrontend:
    service:
      type: NodePort
    ingress:
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/group.name: ${cluster_name}
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-redirect: '443'

loki-stack:
  loki:
    config:
      schema_config:
        configs:
          - from: 2020-10-24
            store: boltdb-shipper
            object_store: s3
            schema: v11
            index:
              prefix: index_
              period: 24h

      storage_config:
        aws:
          s3: s3://${aws_default_region}/${loki_bucket_name}

        boltdb_shipper:
          active_index_directory: /data/loki/index
          shared_store: s3
          cache_location: /data/loki/boltdb-cache

    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: ${loki_assumable_role_arn}

cluster-autoscaler:
  awsRegion: ${aws_default_region}
  rbac:
    create: true
    serviceAccount:
      name: cluster-autoscaler
      annotations:
        eks.amazonaws.com/role-arn: ${cluster_autoscaler_role_arn}
  autoDiscovery:
    clusterName: ${cluster_name}
    enabled: true
